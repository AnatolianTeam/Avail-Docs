"use strict";(self.webpackChunkavail_doc=self.webpackChunkavail_doc||[]).push([[4676],{3737:(i,t,e)=>{e.r(t),e.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=e(5893),n=e(1151);e(4996);const s={id:"overview",title:"Avail ile Bir Rollup Olu\u015fturun",sidebar_label:"Genel Bak\u0131\u015f",sidebar_position:1,"a\xe7\u0131klama":"Avail'i veri kullan\u0131labilirli\u011fi katman\u0131 olarak nas\u0131l kullanaca\u011f\u0131n\u0131z\u0131 ke\u015ffedin.",keywords:["documentation","avail","develop","build","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},l=void 0,r={id:"build-with-avail/overview",title:"Avail ile Bir Rollup Olu\u015fturun",description:"Overview",source:"@site/docs/build-with-avail/overview.md",sourceDirName:"build-with-avail",slug:"/build-with-avail/overview",permalink:"/build-with-avail/overview",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"overview",title:"Avail ile Bir Rollup Olu\u015fturun",sidebar_label:"Genel Bak\u0131\u015f",sidebar_position:1,"a\xe7\u0131klama":"Avail'i veri kullan\u0131labilirli\u011fi katman\u0131 olarak nas\u0131l kullanaca\u011f\u0131n\u0131z\u0131 ke\u015ffedin.",keywords:["documentation","avail","develop","build","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},sidebar:"tutorialSidebar",previous:{title:"Avail ile \u0130n\u015fa Edin",permalink:"/category/avail-ile-i\u0307n\u015fa-edin"},next:{title:"Optimum",permalink:"/category/optimum"}},o={},c=[{value:"Overview",id:"overview",level:2},{value:"System Operations",id:"system-operations",level:2},{value:"Attestation Bridge",id:"attestation-bridge",level:3},{value:"Interaction with the L1",id:"interaction-with-the-l1",level:3},{value:"Security and Finalization",id:"security-and-finalization",level:3},{value:"Avail Light Clients and Data Verification",id:"avail-light-clients-and-data-verification",level:3},{value:"Validium Architecture with Avail",id:"validium-architecture-with-avail",level:2},{value:"Optimium Architecture with Avail",id:"optimium-architecture-with-avail",level:2},{value:"Application IDs (app_id)",id:"application-ids-app_id",level:2},{value:"DA Solution Suites",id:"da-solution-suites",level:2}];function d(i){const t={a:"a",admonition:"admonition",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...i.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(t.p,{children:"Integrating with Avail enhances transaction processing by keeping data off-chain while ensuring its availability and validity. Avail's role as an optimized blockchain for data availability is central to this adaptation, offering a robust and modular design for diverse use cases."}),"\n",(0,a.jsx)(t.h2,{id:"system-operations",children:"System Operations"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Transaction Processing and Sequencing"}),": In the rollup framework, transactions are processed, sequenced, and readied for submission to Avail."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Data Submission to Avail"}),": This processed data is securely transferred to Avail, following a specific protocol designed for efficient and secure data handling."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Configuration and Connection"}),": Rollup systems are configured for seamless integration with Avail, ensuring smooth data flow and interaction."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Smart Contract Interaction"}),": Users engage with on-chain contracts, providing Merkle proofs for actions like withdrawals. These contracts interact with Avail to authenticate and process these transactions."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"attestation-bridge",children:"Attestation Bridge"}),"\n",(0,a.jsx)(t.admonition,{title:"Available on testnet",type:"note",children:(0,a.jsx)(t.p,{children:"Avail's Attestation Bridge is available on testnet for Ethereum."})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Streamlined Verification with Attestation Bridge"}),": Avail's Attestation Bridge simplifies the verification process on L1. This bridge facilitates the direct posting of data availability attestations to the L1 blockchain, thereby easing the workload of the verification contract."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Role of the Verification Contract"}),": With the Attestation Bridge in place, the verification contract's primary role is to check these on-chain attestations, ensuring data availability and integrity."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"interaction-with-the-l1",children:"Interaction with the L1"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Verification Contract Functionality"}),": Situated on the L1, this contract plays a dual role\u2014it verifies transaction accuracy and checks data availability, utilizing Avail's attestations."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"L1 Contract Dynamics"}),": Rollups maintain a communicative relationship with L1 via dedicated contracts. The main attestation contract stores state commitments (Merkle data roots) from block producers. Parallelly, a verification contract handles state transition validity checks."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"security-and-finalization",children:"Security and Finalization"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Validator Consensus"}),": Avail's validators, part of a Nominated Proof-of-Stake system, reach consensus on the transaction batches."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"GRANDPA Finality Gadget"}),": The consensus is solidified using the GRANDPA finality gadget, guaranteeing the availability of data."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Data Root Publication"}),": Sequencers publish the data root on the L1, linking Avail's data availability with L1's security."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"avail-light-clients-and-data-verification",children:"Avail Light Clients and Data Verification"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Independent Data Verification"}),": Avail's light clients enable verification of data availability without relying on the majority of nodes."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Data Sampling"}),": Light clients can sample from the blocks on Avail's blockchain using an AppId to validate data availability."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"validium-architecture-with-avail",children:"Validium Architecture with Avail"}),"\n",(0,a.jsx)(t.p,{children:"In the Validium model, transactions are collected by a sequencer, which batches them together. The sequencer's role extends beyond transaction ordering\u2014it prepares a Merkle tree of transactions, where each leaf represents a transaction or a set of transactions. The root of this Merkle tree, known as the batch hash, is crucial for ensuring the integrity of the transaction batch and for constructing inclusion proofs."}),"\n",(0,a.jsx)(t.p,{children:"Avail comes into play as the recipient of this transaction data. Upon receiving the batched transactions, Avail executes erasure coding."}),"\n",(0,a.jsx)(t.p,{children:"An inclusion proof is a Merkle proof generated by Avail to attest that a specific transaction is part of the batch and has been recorded on Avail\u2019s blockchain. It\u2019s essential for verifying the presence of transactions without downloading the entire dataset."}),"\n",(0,a.jsx)(t.p,{children:"Simultaneously, the state of the system is computed by executing these transactions. A Prover, which is a computational entity, takes the state transitions and generates cryptographic proofs\u2014such as zk-SNARKs or STARKs\u2014to attest to the validity of state changes without revealing the underlying data."}),"\n",(0,a.jsx)(t.p,{children:"A Sequence Sender is responsible for communicating with L1. It takes the inclusion proofs and batch hashes from Avail, along with validity proofs from the Prover, and submits them to the L1 chain. This submission process usually involves smart contract calls that log the transaction data's hash and the validity proofs onto the L1 blockchain."}),"\n",(0,a.jsx)(t.p,{children:"The L1 acts as the main layer for dispute resolution and finality. While it doesn\u2019t store the transaction data itself, it retains the cryptographic commitments to the data. This ensures that if there's ever a dispute or need for verification, the proofs can be checked against the commitments to ascertain the validity of state transitions and the availability of data."}),"\n",(0,a.jsx)(t.p,{children:"This setup leverages L1's security while offloading the data-intensive work to Avail, which is optimized for handling vast amounts of data efficiently and securely. By doing so, Validium chains can significantly reduce their costs and improve scalability, all the while maintaining a high level of trust and security."}),"\n",(0,a.jsx)(t.h2,{id:"optimium-architecture-with-avail",children:"Optimium Architecture with Avail"}),"\n",(0,a.jsx)(t.p,{children:"In the Optimium model, transactions are similarly aggregated by a sequencer. This sequencer organizes transactions into batches and computes a data root, a Merkle tree root representing the batch, crucial for integrity and proof of inclusion."}),"\n",(0,a.jsx)(t.p,{children:"Avail is integrated as a data availability layer. Once the sequencer sends transaction batches to Avail, it employs erasure coding to ensure data redundancy and integrity. Avail then generates KZG polynomial commitments and the data root, essential for confirming data availability."}),"\n",(0,a.jsx)(t.p,{children:"The next phase involves state computation of the system, executed on the rollup, depending on the chain\u2019s architecture. Avail\u2019s data availability solution ensures that the transaction data is readily accessible for any necessary computation or verification."}),"\n",(0,a.jsx)(t.p,{children:"A Sequence Sender, in this architecture, is responsible for submitting proofs to the main chain. These include the data root from Avail, ensuring that the data availability is anchored to the security of Ethereum or the corresponding L2."}),"\n",(0,a.jsx)(t.p,{children:"This architecture provides the dual benefits of the main chain's security for settlement and dispute resolution, and Avail's efficiency in handling data. By offloading data availability to Avail, Optimium chains can achieve higher scalability and efficiency while maintaining robust security and decentralization."}),"\n",(0,a.jsx)(t.h2,{id:"application-ids-app_id",children:"Application IDs (app_id)"}),"\n",(0,a.jsx)(t.p,{children:"As a general purpose base layer, Avail is designed to support many\nmodular chains at the same time, providing consensus and data\navailability to all of them simultaneously."}),"\n",(0,a.jsxs)(t.p,{children:['How does this work? Avail headers contain an index that allows a given\nmodular chain (or "application" in Avail terminology) to determine and\ndownload ',(0,a.jsx)(t.em,{children:"only"})," the sections of a block that have data for that\nparticular application."]}),"\n",(0,a.jsx)(t.p,{children:"This has very important benefits, including:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Modular applications are largely unaffected by other uses of the\nbase layer at the same time."}),"\n",(0,a.jsx)(t.li,{children:"Block sizes can increase without requiring applications to fetch\nmore data, because they don't fetch the whole block, only what's\nrelevant to them."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Data availability sampling is still done on the entire block,\nhowever--this is the process where clients sample very small parts of\nthe block at random to verify availability."}),"\n",(0,a.jsxs)(t.p,{children:["If you'd like to learn how your idea could\nbenefit from Avail, please ",(0,a.jsx)(t.a,{href:"https://discord.gg/S2XQJjHsZt",children:"join our\nDiscord"}),". We'd love to chat."]}),"\n",(0,a.jsx)(t.h2,{id:"da-solution-suites",children:"DA Solution Suites"}),"\n",(0,a.jsx)(t.p,{children:"Avail Uncharted is a core initiative within the Avail ecosystem dedicated to exploring uncharted territories in modular blockchain technology.\nDriven by the core Avail team, the mission is twofold: to nurture innovative projects and to cultivate a close-knit collaboration with the community."}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Project"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,a.jsx)(t.th,{style:{textAlign:"left"},children:"Repository"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"Avail-Powered Optimistic EVM Rollup"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"A sovereign EVM-compatible optimistic rollup construction."}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/availproject/op-evm",children:(0,a.jsx)("ins",{children:"op-evm"})})})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"DA Adapter for Sovereign SDK"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"An adapter enabling modular sovereign rollups using the Sovereign Rollup SDK."}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/availproject/sovereign-sdk/tree/main",children:(0,a.jsx)("ins",{children:"sovereign-da-adapter"})})})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"DA Interface for Madara Starknet"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"A unified DA interface allowing the Madara Starknet Sequencer to publish data onto Avail."}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/keep-starknet-strange/madara/pull/1021",children:(0,a.jsx)("ins",{children:"madara-da-interface"})})})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"Avail-Powered zkEVM-Based Validium"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"A Validium based on the Polygon zkEVM stack that uses Avail instead of the native DAC for data availability."}),(0,a.jsxs)(t.td,{style:{textAlign:"left"},children:["- ",(0,a.jsx)(t.a,{href:"https://github.com/QEDK/validium-node",children:(0,a.jsx)("ins",{children:"validium-node"})})," ",(0,a.jsx)("br",{})," - ",(0,a.jsx)(t.a,{href:"https://github.com/QEDK/validium-contracts",children:(0,a.jsx)("ins",{children:"validium-contracts"})})]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"DA Adapter for Optimism SDK"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"An adapter facilitating Avail DA's integration with Optimism's Rollup SDK op-stack."}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/availproject/avail-op-stack-adapter",children:(0,a.jsx)("ins",{children:"avail-op-stack-adapter"})})})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"DA Adapter for Rollkit"}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:"An adapter designed for Rollkit's modular rollup framework that enables ABCI-compatible solutions."}),(0,a.jsx)(t.td,{style:{textAlign:"left"},children:(0,a.jsx)(t.a,{href:"https://github.com/rollkit/rollkit/pull/1168",children:(0,a.jsx)("ins",{children:"rollkit-da-adapter"})})})]})]})]})]})}function h(i={}){const{wrapper:t}={...(0,n.a)(),...i.components};return t?(0,a.jsx)(t,{...i,children:(0,a.jsx)(d,{...i})}):d(i)}},1151:(i,t,e)=>{e.d(t,{Z:()=>r,a:()=>l});var a=e(7294);const n={},s=a.createContext(n);function l(i){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof i?i(t):{...t,...i}}),[t,i])}function r(i){let t;return t=i.disableParentContext?"function"==typeof i.components?i.components(n):i.components||n:l(i.components),a.createElement(s.Provider,{value:t},i.children)}}}]);